# Temporal Helm Chart Values for External Cassandra and Elasticsearch
nameOverride: ""
fullnameOverride: ""
debug: false
imagePullSecrets: {}

# Service Account Configuration
serviceAccount:
  extraAnnotations: {}

additionalAnnotations: {}
additionalLabels: {}

# Temporal Server Configuration
server:
  enabled: true
  image:
    repository: temporalio/server
    tag: 1.28.0
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  # Metrics Configuration
  metrics:
    annotations:
      enabled: true
    tags: {}
    excludeTags: {}
    prefix: ""
    serviceMonitor:
      enabled: false
      interval: 30s
      additionalLabels: {}
      metricRelabelings: []
    prometheus:
      timerType: histogram
  
  # Pod Configuration
  deploymentLabels: {}
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  secretLabels: {}
  secretAnnotations: {}
  resources: {}
  
  # Node Selection and Tolerations
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  affinity: {}
  
  additionalVolumes:
    - name: opensearch-tls-certs
      secret:
        secretName: opensearch-tls-certs
  additionalVolumeMounts:
    - name: opensearch-tls-certs
      mountPath: /etc/ssl/certs
      readOnly: true
  additionalEnv:
    - name: CURL_CA_BUNDLE
      value: "/etc/ssl/certs/ca.crt"
  additionalInitContainers: []
  
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  
  # Main Server Configuration
  config:
    logLevel: "info"
    # IMPORTANT: This value cannot be changed once set
    numHistoryShards: 4096
    
    # Persistence Configuration for External Cassandra
    persistence:
      defaultStore: default
      additionalStores: {}
      
      # Default store configuration (Cassandra)
      default:
        driver: "cassandra"
        cassandra:
          hosts: ["temporal-cassandra-dc1-service.temporal.svc.cluster.local"]
          port: 9042
          keyspace: "temporal"
          user: "temporal-cassandra-superuser"
          password: "1fKyHzC70YH3BbW83f2y"
          existingSecret: ""
          replicationFactor: 2
          replication:
            class: "NetworkTopologyStrategy"
            dc1: 3
          consistency:
            default:
              consistency: "local_quorum"
              serialConsistency: "local_serial"
      
      # Visibility store will be automatically configured to use Elasticsearch
      # when elasticsearch.external is set to true
    
    # Namespace Configuration
    namespaces:
      create: true
      namespace:
        - name: default
          retention: 14d
  
  # Frontend Service Configuration
  frontend:
    enabled: true
    replicaCount: 2
    service:
      annotations:
        cloud.google.com/load-balancer-type: "Internal"
        networking.gke.io/internal-load-balancer-allow-global-access: "true"
      type: LoadBalancer
      port: 7233
      membershipPort: 6933
      httpPort: 7243
      loadBalancerIP: 10.230.0.87
    ingress:
      enabled: false
      annotations: {}
      hosts:
        - "/"
      tls: []
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # Internal Frontend (disabled by default)
  internalFrontend:
    enabled: false
    service:
      annotations: {}
      type: ClusterIP
      port: 7236
      membershipPort: 6936
      httpPort: 7246
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # History Service Configuration
  history:
    service:
      port: 7234
      membershipPort: 6934
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    additionalEnvSecretName: ""
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # Matching Service Configuration
  matching:
    service:
      port: 7235
      membershipPort: 6935
    metrics:
      annotations:
        enabled: false
      serviceMonitor: {}
      prometheus: {}
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # Worker Service Configuration
  worker:
    service:
      port: 7239
      membershipPort: 6939
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      prometheus: {}
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}

# Admin Tools Configuration
admintools:
  enabled: true
  image:
    repository: temporalio/admin-tools
    tag: 1.28.0-tctl-1.18.2-cli-1.3.0
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 22
    annotations: {}
  deploymentLabels: {}
  deploymentAnnotations: {}
  podLabels: {}
  podAnnotations: {}
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  affinity: {}
  additionalVolumes:
    - name: opensearch-tls-certs
      secret:
        secretName: opensearch-tls-certs
  additionalVolumeMounts:
    - name: opensearch-tls-certs
      mountPath: /etc/ssl/certs
      readOnly: true
  additionalEnv:
    - name: CURL_CA_BUNDLE
      value: "/etc/ssl/certs/ca.crt"
  additionalEnvSecretName: ""
  additionalInitContainers: []
  resources: {}
  containerSecurityContext: {}
  securityContext: {}
  podDisruptionBudget: {}

# Web UI Configuration
web:
  enabled: true
  replicaCount: 2
  image:
    repository: temporalio/ui
    tag: 2.38.3
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    port: 8080
    annotations:
      cloud.google.com/load-balancer-type: "Internal"
      networking.gke.io/internal-load-balancer-allow-global-access: "true"
    loadBalancerIP: 10.230.0.88
  ingress:
    enabled: false
    annotations: {}
    hosts:
      - "/"
    tls: []
  deploymentLabels: {}
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  resources: {}
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  affinity: {}
  additionalVolumes: []
  additionalVolumeMounts: []
  additionalEnv:
    - name: TEMPORAL_CSRF_COOKIE_INSECURE
      value: "true"
    - name: TEMPORAL_CORS_ORIGINS
      value: "http://temporal-web.stage-internal.arcana.io"
  additionalEnvSecretName: ""
  containerSecurityContext: {}
  securityContext: {}
  topologySpreadConstraints: []
  podDisruptionBudget: {}

# Schema Migration Configuration
schema:
  createDatabase:
    enabled: true
  setup:
    enabled: true
    backoffLimit: 100
  update:
    enabled: true
    backoffLimit: 100
  podAnnotations: {}
  podLabels: {}
  resources: {}
  containerSecurityContext: {}
  securityContext: {}

# External Elasticsearch Configuration
elasticsearch:
  enabled: false  # Disable internal Elasticsearch
  external: true  # Use external Elasticsearch
  host: "temporal-opensearch.temporal.svc.cluster.local"
  scheme: "https"
  port: 9200
  version: "v7"
  logLevel: "info,debug"
  username: "admin"
  password: "admin"
  visibilityIndex: "temporal_visibility_v1_dev"
  # Index settings for OpenSearch
  indices:
    settings:
      number_of_shards: 16
      number_of_replicas: 2
  # TLS configuration for HTTPS connection with CA certificate verification
  tls:
    enabled: true
    caFile: "/etc/ssl/certs/ca.crt"
    certFile: "/etc/ssl/certs/tls.crt"
    keyFile: "/etc/ssl/certs/tls.key"
    enableHostVerification: false

# Disable Internal Dependencies
cassandra:
  enabled: false  # Disable internal Cassandra

mysql:
  enabled: false  # Disable MySQL

postgresql:
  enabled: false  # Disable PostgreSQL

# Disable Monitoring (can be enabled if needed)
prometheus:
  enabled: false
  nodeExporter:
    enabled: false

grafana:
  enabled: false