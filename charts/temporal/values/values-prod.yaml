# Temporal Helm Chart Values for External Cassandra and Elasticsearch
nameOverride: ""
fullnameOverride: ""
debug: false
imagePullSecrets: {}

# Service Account Configuration
serviceAccount:
  extraAnnotations: {}

additionalAnnotations: {}
additionalLabels: {}

# Global Monitoring Configuration
globalMetrics:
  enabled: true
  annotations:
    enabled: true
  serviceMonitor:
    enabled: false
    interval: 15s
    additionalLabels: {}
    metricRelabelings: []
  prometheus:
    timerType: histogram

# Temporal Server Configuration
server:
  enabled: true
  image:
    repository: temporalio/server
    tag: 1.28.0
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  # Metrics Configuration (inherits from globalMetrics)
  metrics:
    tags: {}
    excludeTags: {}
    prefix: ""
  
  # Pod Configuration
  deploymentLabels: {}
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  secretLabels: {}
  secretAnnotations: {}
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
  
  # Node Selection and Tolerations
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  affinity: {}
  
  additionalVolumes:
    - name: opensearch-tls-certs
      secret:
        secretName: opensearch-tls-certs
  additionalVolumeMounts:
    - name: opensearch-tls-certs
      mountPath: /etc/ssl/certs
      readOnly: true
  additionalEnv:
    - name: CURL_CA_BUNDLE
      value: "/etc/ssl/certs/ca.crt"
  additionalInitContainers: []
  
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  
  # Main Server Configuration
  config:
    logLevel: "info"
    # IMPORTANT: This value cannot be changed once set
    numHistoryShards: 4096
    
    # Persistence Configuration for External Cassandra
    persistence:
      defaultStore: default
      additionalStores: {}
      
      # Default store configuration (Cassandra)
      default:
        driver: "cassandra"
        cassandra:
          hosts: ["temporal-cassandra-dc1-service.temporal.svc.cluster.local"]
          port: 9042
          keyspace: "temporal"
          user: "temporal-cassandra-superuser"
          password: "drO8ZGuuaFyRTz-b-3pi"
          existingSecret: ""
          replicationFactor: 3
          replication:
            class: "NetworkTopologyStrategy"
            dc1: 3
          consistency:
            default:
              consistency: "local_quorum"
              serialConsistency: "local_serial"
      
      # Visibility store will be automatically configured to use Elasticsearch
      # when elasticsearch.external is set to true
    
    # Namespace Configuration
    namespaces:
      create: true
      namespace:
        - name: default
          retention: 14d
  
  # Frontend Service Configuration
  frontend:
    enabled: true
    replicaCount: 3
    service:
      annotations:
        cloud.google.com/load-balancer-type: "Internal"
        networking.gke.io/internal-load-balancer-allow-global-access: "true"
      type: LoadBalancer
      port: 7233
      membershipPort: 6933
      httpPort: 7243
      loadBalancerIP: 10.142.0.80
    ingress:
      enabled: false
      annotations: {}
      hosts:
        - "/"
      tls: []
    # Metrics inherited from globalMetrics
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # Internal Frontend (disabled by default)
  internalFrontend:
    enabled: false
    service:
      annotations: {}
      type: ClusterIP
      port: 7236
      membershipPort: 6936
      httpPort: 7246
    # Metrics inherited from globalMetrics
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # History Service Configuration
  history:
    service:
      port: 7234
      membershipPort: 6934
    # Metrics inherited from globalMetrics
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    additionalEnvSecretName: ""
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # Matching Service Configuration
  matching:
    service:
      port: 7235
      membershipPort: 6935
    # Metrics inherited from globalMetrics
    metrics:
      annotations:
        enabled: true
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}
  
  # Worker Service Configuration
  worker:
    service:
      port: 7239
      membershipPort: 6939
    # Metrics inherited from globalMetrics
    deploymentLabels: {}
    deploymentAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    affinity: {}
    additionalEnv: []
    containerSecurityContext: {}
    topologySpreadConstraints: []
    podDisruptionBudget: {}

# Admin Tools Configuration
admintools:
  enabled: true
  image:
    repository: temporalio/admin-tools
    tag: 1.28.0-tctl-1.18.2-cli-1.3.0
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 22
    annotations: {}
  # Metrics inherited from globalMetrics
  deploymentLabels: {}
  deploymentAnnotations: {}
  podLabels: {}
  podAnnotations: {}
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  affinity: {}
  additionalVolumes:
    - name: opensearch-tls-certs
      secret:
        secretName: opensearch-tls-certs
  additionalVolumeMounts:
    - name: opensearch-tls-certs
      mountPath: /etc/ssl/certs
      readOnly: true
  additionalEnv:
    - name: CURL_CA_BUNDLE
      value: "/etc/ssl/certs/ca.crt"
  additionalEnvSecretName: ""
  additionalInitContainers: []
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
  containerSecurityContext: {}
  securityContext: {}
  podDisruptionBudget: {}

# Web UI Configuration
web:
  enabled: true
  replicaCount: 2
  image:
    repository: temporalio/ui
    tag: 2.38.3
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    port: 8080
    annotations:
      cloud.google.com/load-balancer-type: "Internal"
      networking.gke.io/internal-load-balancer-allow-global-access: "true"
    loadBalancerIP: 10.142.0.84
  # Metrics inherited from globalMetrics
  ingress:
    enabled: false
    annotations: {}
    hosts:
      - "/"
    tls: []
  deploymentLabels: {}
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  affinity: {}
  additionalVolumes: []
  additionalVolumeMounts: []
  additionalEnv:
    - name: TEMPORAL_CSRF_COOKIE_INSECURE
      value: "true"
    - name: TEMPORAL_CORS_ORIGINS
      value: "http://temporal-web.internal.arcana.io"
  additionalEnvSecretName: ""
  containerSecurityContext: {}
  securityContext: {}
  topologySpreadConstraints: []
  podDisruptionBudget: {}

# Schema Migration Configuration
schema:
  createDatabase:
    enabled: true
  setup:
    enabled: true
    backoffLimit: 100
  update:
    enabled: true
    backoffLimit: 100
  podAnnotations: {}
  podLabels: {}
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
  containerSecurityContext: {}
  securityContext: {}

# External Elasticsearch Configuration
elasticsearch:
  enabled: false  # Disable internal Elasticsearch
  external: true  # Use external Elasticsearch
  host: "temporal-opensearch.temporal.svc.cluster.local"
  scheme: "https"
  port: 9200
  version: "v7"
  logLevel: "info,debug"
  username: "admin"
  password: "admin"
  visibilityIndex: "temporal_visibility_v1_dev"
  # Index settings for OpenSearch
  indices:
    settings:
      number_of_shards: 16
      number_of_replicas: 2
  # TLS configuration for HTTPS connection with CA certificate verification
  tls:
    enabled: true
    caFile: "/etc/ssl/certs/ca.crt"
    certFile: "/etc/ssl/certs/tls.crt"
    keyFile: "/etc/ssl/certs/tls.key"
    enableHostVerification: false

# Disable Internal Dependencies
cassandra:
  enabled: false  # Disable internal Cassandra

mysql:
  enabled: false  # Disable MySQL

postgresql:
  enabled: false  # Disable PostgreSQL

# Prometheus Monitoring Configuration
prometheus:
  enabled: true
  nodeSelector:
    workload: temporal-services
  tolerations:
    - key: workload
      operator: Equal
      value: temporal-services
      effect: NoExecute
  
  # Prometheus Server Configuration
  server:
    # Data retention configuration
    retention: "15d"  # Keep metrics for 30 days
    retentionSize: "20GB"  # Maximum storage size before cleanup
    
    # Persistent storage configuration
    persistentVolume:
      enabled: true
      size: 50Gi  # Disk size for Prometheus data
      storageClass: "standard-rwo"  # Adjust based on your cluster's storage classes
      accessModes:
        - ReadWriteOnce
    
    # Resource limits and requests
    resources:
      requests:
        memory: "4Gi"
        cpu: "500m"
      limits:
        memory: "6Gi"
        cpu: "2000m"
    
    # Node placement
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    
    # Additional server configuration
    global:
      scrape_interval: 60s
      evaluation_interval: 60s
      scrape_timeout: 10s
      external_labels:
        cluster: 'temporal-prod'
        environment: 'prod'

  # Override default scrape configs to only scrape temporal namespace
  serverFiles:
    prometheus.yml:
      scrape_configs:
        # Prometheus self-monitoring
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090
        
        # Scrape temporal services in temporal namespace only
        - job_name: 'temporal-services'
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                  - temporal
          relabel_configs:
            # Keep only services with prometheus scraping annotations
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            # Use custom path if specified
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            # Use custom port if specified
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            # Add service name as label
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            # Add namespace as label
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
        
        # Scrape temporal pods directly (for services without service monitors)
        - job_name: 'temporal-pods'
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - temporal
          relabel_configs:
            # Keep only pods with prometheus scraping annotations
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            # Use custom path if specified
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            # Use custom port if specified
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            # Add pod name as label
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod
            # Add namespace as label
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
        
        # Scrape OpenSearch metrics (no prometheus annotations, so explicit config needed)
        - job_name: 'opensearch-metrics'
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                  - temporal
          relabel_configs:
            # Only scrape OpenSearch services
            - source_labels: [__meta_kubernetes_service_name]
              action: keep
              regex: 'temporal-opensearch.*'
            # Use port 9600 for metrics
            - source_labels: [__address__]
              action: replace
              regex: '([^:]+)(?::\d+)?'
              replacement: '$1:9600'
              target_label: __address__
            # Set metrics path
            - target_label: __metrics_path__
              replacement: /_prometheus/metrics
            # Add service name as label
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            # Add namespace as label
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            # Add job label
            - target_label: job
              replacement: opensearch
  
  # Prometheus Pushgateway Configuration
  prometheus-pushgateway:
    enabled: true
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  
  # Prometheus Node Exporter Configuration
  prometheus-node-exporter:
    enabled: true
    nodeSelector:
      workload: temporal-services
    tolerations:
      - key: workload
        operator: Equal
        value: temporal-services
        effect: NoExecute
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "200m"

grafana:
  enabled: false